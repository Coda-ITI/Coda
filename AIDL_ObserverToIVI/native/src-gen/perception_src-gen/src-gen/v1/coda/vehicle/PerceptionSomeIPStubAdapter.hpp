/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_CODA_VEHICLE_PERCEPTION_SOMEIP_STUB_ADAPTER_HPP_
#define V1_CODA_VEHICLE_PERCEPTION_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/coda/vehicle/PerceptionStub.hpp>
#include <v1/coda/vehicle/PerceptionSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace coda {
namespace vehicle {

template <typename _Stub = ::v1::coda::vehicle::PerceptionStub, typename... _Stubs>
class PerceptionSomeIPStubAdapterInternal
    : public virtual PerceptionStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> PerceptionSomeIPStubAdapterHelper;

    ~PerceptionSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        PerceptionSomeIPStubAdapterHelper::deinit();
    }

    void fireDooor_FR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState);

    void fireDooor_FL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState);

    void fireDooor_RR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState);

    void fireDooor_RL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState);

    void fireMultiDoorNotifyEvent(const std::vector< ::v1::coda::vehicle::Perception::S_DoorState > &_doorState);

    void fireNotifyUltrasonic_1Event(const float &_value);

    void fireNotifyUltrasonic_2Event(const float &_value);

    void fireNotifyUltrasonic_3Event(const float &_value);

    void fireNotifyUltrasonic_4Event(const float &_value);

    void fireNotifyMultiUltrasonicEvent(const std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState > &_ultrasonicStates);

    void fireNotifySpeedEvent(const uint16_t &_speed);

    void fireNotifyRPMEvent(const uint16_t &_RPM);

    void fireNotifyGearStateEvent(const ::v1::coda::vehicle::Perception::GearState &_gearState);

    void fireNotifyCoordinatesEvent(const ::v1::coda::vehicle::Perception::Coordinates &_coordinates);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        CommonAPI::Version
    > getPerceptionInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< Perception::DoorPos>,
        std::tuple< Perception::DoorState>,
        std::tuple< ::v1::coda::vehicle::Perception_::DoorPosDeployment_t>,
        std::tuple< ::v1::coda::vehicle::Perception_::DoorStateDeployment_t>
    > requestDoorStateStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< >,
        std::tuple< std::vector< Perception::S_DoorState >>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t >>
    > requestAllDoorsStatesStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< Perception::UltrasonicNo>,
        std::tuple< float>,
        std::tuple< ::v1::coda::vehicle::Perception_::UltrasonicNoDeployment_t>,
        std::tuple< CommonAPI::EmptyDeployment>
    > requestUltrasonicValueStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< >,
        std::tuple< std::vector< Perception::S_UltrasonicState >>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t >>
    > requestAllUltrasonicValuesStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< >,
        std::tuple< uint16_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint16_t>>
    > requestSpeedStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< >,
        std::tuple< uint16_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint16_t>>
    > requestRPMStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< >,
        std::tuple< Perception::Coordinates>,
        std::tuple< >,
        std::tuple< ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t>
    > requestCoordinatesStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::PerceptionStub,
        std::tuple< >,
        std::tuple< Perception::GearState>,
        std::tuple< >,
        std::tuple< ::v1::coda::vehicle::Perception_::GearStateDeployment_t>
    > requestGearStateStubDispatcher;
    
    PerceptionSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        PerceptionSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< PerceptionStub>(_stub)),
        getPerceptionInterfaceVersionStubDispatcher(&PerceptionStub::lockInterfaceVersionAttribute, &PerceptionStub::getInterfaceVersion, false, true),
        requestDoorStateStubDispatcher(
            &PerceptionStub::requestDoorState,
            false,
            _stub->hasElement(5),
            std::make_tuple(&::v1::coda::vehicle::Perception_::DoorPosDeployment),
            std::make_tuple(&::v1::coda::vehicle::Perception_::DoorStateDeployment))
        
        ,
        requestAllDoorsStatesStubDispatcher(
            &PerceptionStub::requestAllDoorsStates,
            false,
            _stub->hasElement(6),
            std::make_tuple(),
            std::make_tuple(&::v1::coda::vehicle::Perception_::requestAllDoorsStates_doorStateDeployment))
        
        ,
        requestUltrasonicValueStubDispatcher(
            &PerceptionStub::requestUltrasonicValue,
            false,
            _stub->hasElement(12),
            std::make_tuple(&::v1::coda::vehicle::Perception_::UltrasonicNoDeployment),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)))
        
        ,
        requestAllUltrasonicValuesStubDispatcher(
            &PerceptionStub::requestAllUltrasonicValues,
            false,
            _stub->hasElement(13),
            std::make_tuple(),
            std::make_tuple(&::v1::coda::vehicle::Perception_::requestAllUltrasonicValues_ultrasonicStatesDeployment))
        
        ,
        requestSpeedStubDispatcher(
            &PerceptionStub::requestSpeed,
            false,
            _stub->hasElement(18),
            std::make_tuple(),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr)))
        
        ,
        requestRPMStubDispatcher(
            &PerceptionStub::requestRPM,
            false,
            _stub->hasElement(19),
            std::make_tuple(),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr)))
        
        ,
        requestCoordinatesStubDispatcher(
            &PerceptionStub::requestCoordinates,
            false,
            _stub->hasElement(20),
            std::make_tuple(),
            std::make_tuple(static_cast< ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t* >(nullptr)))
        
        ,
        requestGearStateStubDispatcher(
            &PerceptionStub::requestGearState,
            false,
            _stub->hasElement(21),
            std::make_tuple(),
            std::make_tuple(&::v1::coda::vehicle::Perception_::GearStateDeployment))
        
    {
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &requestDoorStateStubDispatcher );
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &requestAllDoorsStatesStubDispatcher );
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &requestUltrasonicValueStubDispatcher );
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x4) }, &requestAllUltrasonicValuesStubDispatcher );
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5) }, &requestSpeedStubDispatcher );
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6) }, &requestRPMStubDispatcher );
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7) }, &requestCoordinatesStubDispatcher );
        PerceptionSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x8) }, &requestGearStateStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b59));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9471), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b59));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9472), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b59));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9473), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b59));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9474), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b59));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9475), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5b));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x947a), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5b));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x947b), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5b));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x947c), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5b));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x947d), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5b));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x947e), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5c));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9482), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5c));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x947f), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5d));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9481), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5c));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9480), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDooor_FR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
    CommonAPI::Deployable< Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t> deployed_doorState(_doorState, &::v1::coda::vehicle::Perception_::DoorStateDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9471),
            false,
             deployed_doorState 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDooor_FL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
    CommonAPI::Deployable< Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t> deployed_doorState(_doorState, &::v1::coda::vehicle::Perception_::DoorStateDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9472),
            false,
             deployed_doorState 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDooor_RR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
    CommonAPI::Deployable< Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t> deployed_doorState(_doorState, &::v1::coda::vehicle::Perception_::DoorStateDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9473),
            false,
             deployed_doorState 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDooor_RL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
    CommonAPI::Deployable< Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t> deployed_doorState(_doorState, &::v1::coda::vehicle::Perception_::DoorStateDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9474),
            false,
             deployed_doorState 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireMultiDoorNotifyEvent(const std::vector< ::v1::coda::vehicle::Perception::S_DoorState > &_doorState) {
    CommonAPI::Deployable< std::vector< Perception::S_DoorState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t >> deployed_doorState(_doorState, &::v1::coda::vehicle::Perception_::multiDoorNotify_doorStateDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::vector< ::v1::coda::vehicle::Perception::S_DoorState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t > > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9475),
            false,
             deployed_doorState 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyUltrasonic_1Event(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  float
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x947a),
            false,
            _value
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyUltrasonic_2Event(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  float
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x947b),
            false,
            _value
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyUltrasonic_3Event(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  float
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x947c),
            false,
            _value
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyUltrasonic_4Event(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  float
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x947d),
            false,
            _value
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyMultiUltrasonicEvent(const std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState > &_ultrasonicStates) {
    CommonAPI::Deployable< std::vector< Perception::S_UltrasonicState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t >> deployed_ultrasonicStates(_ultrasonicStates, &::v1::coda::vehicle::Perception_::notifyMultiUltrasonic_ultrasonicStatesDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t > > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x947e),
            false,
             deployed_ultrasonicStates 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifySpeedEvent(const uint16_t &_speed) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deployed_speed(_speed, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9482),
            false,
             deployed_speed 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyRPMEvent(const uint16_t &_RPM) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deployed_RPM(_RPM, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x947f),
            false,
             deployed_RPM 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyGearStateEvent(const ::v1::coda::vehicle::Perception::GearState &_gearState) {
    CommonAPI::Deployable< Perception::GearState, ::v1::coda::vehicle::Perception_::GearStateDeployment_t> deployed_gearState(_gearState, &::v1::coda::vehicle::Perception_::GearStateDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::coda::vehicle::Perception::GearState, ::v1::coda::vehicle::Perception_::GearStateDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9481),
            false,
             deployed_gearState 
    );
}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyCoordinatesEvent(const ::v1::coda::vehicle::Perception::Coordinates &_coordinates) {
    CommonAPI::Deployable< Perception::Coordinates, ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t> deployed_coordinates(_coordinates, static_cast< ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::coda::vehicle::Perception::Coordinates, ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9480),
            false,
             deployed_coordinates 
    );
}


template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v1::coda::vehicle::PerceptionStub, typename... _Stubs>
class PerceptionSomeIPStubAdapter
    : public PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    PerceptionSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          PerceptionSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace vehicle
} // namespace coda
} // namespace v1

#endif // V1_CODA_VEHICLE_Perception_SOMEIP_STUB_ADAPTER_HPP_
