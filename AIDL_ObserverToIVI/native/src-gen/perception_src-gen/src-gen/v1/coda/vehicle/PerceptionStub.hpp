/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_CODA_VEHICLE_Perception_STUB_HPP_
#define V1_CODA_VEHICLE_Perception_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/coda/vehicle/Perception.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>


#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace coda {
namespace vehicle {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Perception. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class PerceptionStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual Perception {
 public:
    /**
    * Sends a broadcast event for dooor_FR_Notify. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDooor_FR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) = 0;
    /**
    * Sends a broadcast event for dooor_FL_Notify. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDooor_FL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) = 0;
    /**
    * Sends a broadcast event for dooor_RR_Notify. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDooor_RR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) = 0;
    /**
    * Sends a broadcast event for dooor_RL_Notify. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDooor_RL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) = 0;
    /**
    * Sends a broadcast event for multiDoorNotify. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireMultiDoorNotifyEvent(const std::vector< ::v1::coda::vehicle::Perception::S_DoorState > &_doorState) = 0;
    /**
    * Sends a broadcast event for notifyUltrasonic_1. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyUltrasonic_1Event(const float &_value) = 0;
    /**
    * Sends a broadcast event for notifyUltrasonic_2. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyUltrasonic_2Event(const float &_value) = 0;
    /**
    * Sends a broadcast event for notifyUltrasonic_3. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyUltrasonic_3Event(const float &_value) = 0;
    /**
    * Sends a broadcast event for notifyUltrasonic_4. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyUltrasonic_4Event(const float &_value) = 0;
    /**
    * Sends a broadcast event for notifyMultiUltrasonic. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyMultiUltrasonicEvent(const std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState > &_ultrasonicStates) = 0;
    /**
    * Sends a broadcast event for notifySpeed. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifySpeedEvent(const uint16_t &_speed) = 0;
    /**
    * Sends a broadcast event for notifyRPM. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyRPMEvent(const uint16_t &_RPM) = 0;
    /**
    * Sends a broadcast event for notifyGearState. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyGearStateEvent(const ::v1::coda::vehicle::Perception::GearState &_gearState) = 0;
    /**
    * Sends a broadcast event for notifyCoordinates. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyCoordinatesEvent(const ::v1::coda::vehicle::Perception::Coordinates &_coordinates) = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Perception.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class PerceptionStubRemoteEvent
{
public:
    virtual ~PerceptionStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Perception to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class PerceptionStub
    : public virtual CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>
{
public:
    typedef std::function<void (Perception::DoorState _doorState)> requestDoorStateReply_t;
    typedef std::function<void (std::vector< Perception::S_DoorState > _doorState)> requestAllDoorsStatesReply_t;
    typedef std::function<void (float _value)> requestUltrasonicValueReply_t;
    typedef std::function<void (std::vector< Perception::S_UltrasonicState > _ultrasonicStates)> requestAllUltrasonicValuesReply_t;
    typedef std::function<void (uint16_t _speed)> requestSpeedReply_t;
    typedef std::function<void (uint16_t _rpm)> requestRPMReply_t;
    typedef std::function<void (Perception::Coordinates _coordinates)> requestCoordinatesReply_t;
    typedef std::function<void (Perception::GearState _gearState)> requestGearStateReply_t;

    virtual ~PerceptionStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 22);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// Sends a broadcast event for dooor_FR_Notify.
    virtual void fireDooor_FR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDooor_FR_NotifyEvent(_doorState);
    }
    /// Sends a broadcast event for dooor_FL_Notify.
    virtual void fireDooor_FL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDooor_FL_NotifyEvent(_doorState);
    }
    /// Sends a broadcast event for dooor_RR_Notify.
    virtual void fireDooor_RR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDooor_RR_NotifyEvent(_doorState);
    }
    /// Sends a broadcast event for dooor_RL_Notify.
    virtual void fireDooor_RL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDooor_RL_NotifyEvent(_doorState);
    }
    /// Sends a broadcast event for multiDoorNotify.
    virtual void fireMultiDoorNotifyEvent(const std::vector< ::v1::coda::vehicle::Perception::S_DoorState > &_doorState) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMultiDoorNotifyEvent(_doorState);
    }
    /// This is the method that will be called on remote calls on the method requestDoorState.
    virtual void requestDoorState(const std::shared_ptr<CommonAPI::ClientId> _client, Perception::DoorPos _doorPos, requestDoorStateReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestAllDoorsStates.
    virtual void requestAllDoorsStates(const std::shared_ptr<CommonAPI::ClientId> _client, requestAllDoorsStatesReply_t _reply) = 0;
    /// Sends a broadcast event for notifyUltrasonic_1.
    virtual void fireNotifyUltrasonic_1Event(const float &_value) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyUltrasonic_1Event(_value);
    }
    /// Sends a broadcast event for notifyUltrasonic_2.
    virtual void fireNotifyUltrasonic_2Event(const float &_value) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyUltrasonic_2Event(_value);
    }
    /// Sends a broadcast event for notifyUltrasonic_3.
    virtual void fireNotifyUltrasonic_3Event(const float &_value) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyUltrasonic_3Event(_value);
    }
    /// Sends a broadcast event for notifyUltrasonic_4.
    virtual void fireNotifyUltrasonic_4Event(const float &_value) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyUltrasonic_4Event(_value);
    }
    /// Sends a broadcast event for notifyMultiUltrasonic.
    virtual void fireNotifyMultiUltrasonicEvent(const std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState > &_ultrasonicStates) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyMultiUltrasonicEvent(_ultrasonicStates);
    }
    /// This is the method that will be called on remote calls on the method requestUltrasonicValue.
    virtual void requestUltrasonicValue(const std::shared_ptr<CommonAPI::ClientId> _client, Perception::UltrasonicNo _ultrasonicNo, requestUltrasonicValueReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestAllUltrasonicValues.
    virtual void requestAllUltrasonicValues(const std::shared_ptr<CommonAPI::ClientId> _client, requestAllUltrasonicValuesReply_t _reply) = 0;
    /// Sends a broadcast event for notifySpeed.
    virtual void fireNotifySpeedEvent(const uint16_t &_speed) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifySpeedEvent(_speed);
    }
    /// Sends a broadcast event for notifyRPM.
    virtual void fireNotifyRPMEvent(const uint16_t &_RPM) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyRPMEvent(_RPM);
    }
    /// Sends a broadcast event for notifyGearState.
    virtual void fireNotifyGearStateEvent(const ::v1::coda::vehicle::Perception::GearState &_gearState) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyGearStateEvent(_gearState);
    }
    /// Sends a broadcast event for notifyCoordinates.
    virtual void fireNotifyCoordinatesEvent(const ::v1::coda::vehicle::Perception::Coordinates &_coordinates) {
        auto stubAdapter = CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyCoordinatesEvent(_coordinates);
    }
    /// This is the method that will be called on remote calls on the method requestSpeed.
    virtual void requestSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, requestSpeedReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestRPM.
    virtual void requestRPM(const std::shared_ptr<CommonAPI::ClientId> _client, requestRPMReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestCoordinates.
    virtual void requestCoordinates(const std::shared_ptr<CommonAPI::ClientId> _client, requestCoordinatesReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGearState.
    virtual void requestGearState(const std::shared_ptr<CommonAPI::ClientId> _client, requestGearStateReply_t _reply) = 0;


    using CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef PerceptionStubRemoteEvent RemoteEventType;
    typedef ::v1::coda::vehicle::Perception StubInterface;
};

} // namespace vehicle
} // namespace coda
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_CODA_VEHICLE_Perception_STUB_HPP_
