/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_CODA_VEHICLE_Perception_PROXY_HPP_
#define V1_CODA_VEHICLE_Perception_PROXY_HPP_

#include <v1/coda/vehicle/PerceptionProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace coda {
namespace vehicle {

template <typename ... _AttributeExtensions>
class PerceptionProxy
    : virtual public Perception,
      virtual public PerceptionProxyBase,
      virtual public _AttributeExtensions... {
public:
    PerceptionProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PerceptionProxy();

    typedef ::v1::coda::vehicle::Perception InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Returns the wrapper class that provides access to the broadcast dooor_FR_Notify.
     */
    virtual Dooor_FR_NotifyEvent& getDooor_FR_NotifyEvent() {
        return delegate_->getDooor_FR_NotifyEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast dooor_FL_Notify.
     */
    virtual Dooor_FL_NotifyEvent& getDooor_FL_NotifyEvent() {
        return delegate_->getDooor_FL_NotifyEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast dooor_RR_Notify.
     */
    virtual Dooor_RR_NotifyEvent& getDooor_RR_NotifyEvent() {
        return delegate_->getDooor_RR_NotifyEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast dooor_RL_Notify.
     */
    virtual Dooor_RL_NotifyEvent& getDooor_RL_NotifyEvent() {
        return delegate_->getDooor_RL_NotifyEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast multiDoorNotify.
     */
    virtual MultiDoorNotifyEvent& getMultiDoorNotifyEvent() {
        return delegate_->getMultiDoorNotifyEvent();
    }
    /**
     * Calls requestDoorState with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestDoorState(Perception::DoorPos _doorPos, CommonAPI::CallStatus &_internalCallStatus, Perception::DoorState &_doorState, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestDoorState with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestDoorStateAsync(const Perception::DoorPos &_doorPos, RequestDoorStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestAllDoorsStates with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestAllDoorsStates(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_DoorState > &_doorState, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestAllDoorsStates with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestAllDoorsStatesAsync(RequestAllDoorsStatesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Returns the wrapper class that provides access to the broadcast notifyUltrasonic_1.
     */
    virtual NotifyUltrasonic_1Event& getNotifyUltrasonic_1Event() {
        return delegate_->getNotifyUltrasonic_1Event();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyUltrasonic_2.
     */
    virtual NotifyUltrasonic_2Event& getNotifyUltrasonic_2Event() {
        return delegate_->getNotifyUltrasonic_2Event();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyUltrasonic_3.
     */
    virtual NotifyUltrasonic_3Event& getNotifyUltrasonic_3Event() {
        return delegate_->getNotifyUltrasonic_3Event();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyUltrasonic_4.
     */
    virtual NotifyUltrasonic_4Event& getNotifyUltrasonic_4Event() {
        return delegate_->getNotifyUltrasonic_4Event();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyMultiUltrasonic.
     */
    virtual NotifyMultiUltrasonicEvent& getNotifyMultiUltrasonicEvent() {
        return delegate_->getNotifyMultiUltrasonicEvent();
    }
    /**
     * Calls requestUltrasonicValue with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestUltrasonicValue(Perception::UltrasonicNo _ultrasonicNo, CommonAPI::CallStatus &_internalCallStatus, float &_value, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestUltrasonicValue with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestUltrasonicValueAsync(const Perception::UltrasonicNo &_ultrasonicNo, RequestUltrasonicValueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestAllUltrasonicValues with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestAllUltrasonicValues(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_UltrasonicState > &_ultrasonicStates, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestAllUltrasonicValues with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestAllUltrasonicValuesAsync(RequestAllUltrasonicValuesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Returns the wrapper class that provides access to the broadcast notifySpeed.
     */
    virtual NotifySpeedEvent& getNotifySpeedEvent() {
        return delegate_->getNotifySpeedEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyRPM.
     */
    virtual NotifyRPMEvent& getNotifyRPMEvent() {
        return delegate_->getNotifyRPMEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyGearState.
     */
    virtual NotifyGearStateEvent& getNotifyGearStateEvent() {
        return delegate_->getNotifyGearStateEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyCoordinates.
     */
    virtual NotifyCoordinatesEvent& getNotifyCoordinatesEvent() {
        return delegate_->getNotifyCoordinatesEvent();
    }
    /**
     * Calls requestSpeed with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSpeed(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_speed, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSpeed with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSpeedAsync(RequestSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestRPM with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestRPM(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_rpm, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestRPM with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestRPMAsync(RequestRPMAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestCoordinates with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestCoordinates(CommonAPI::CallStatus &_internalCallStatus, Perception::Coordinates &_coordinates, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestCoordinates with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestCoordinatesAsync(RequestCoordinatesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGearState with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGearState(CommonAPI::CallStatus &_internalCallStatus, Perception::GearState &_gearState, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGearState with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGearStateAsync(RequestGearStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);



 private:
    std::shared_ptr< PerceptionProxyBase> delegate_;
};

typedef PerceptionProxy<> PerceptionProxyDefault;


//
// PerceptionProxy Implementation
//
template <typename ... _AttributeExtensions>
PerceptionProxy<_AttributeExtensions...>::PerceptionProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< PerceptionProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< PerceptionProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
PerceptionProxy<_AttributeExtensions...>::~PerceptionProxy() {
}

template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestDoorState(Perception::DoorPos _doorPos, CommonAPI::CallStatus &_internalCallStatus, Perception::DoorState &_doorState, const CommonAPI::CallInfo *_info) {
    if (!_doorPos.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestDoorState(_doorPos, _internalCallStatus, _doorState, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestDoorStateAsync(const Perception::DoorPos &_doorPos, RequestDoorStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_doorPos.validate()) {
        Perception::DoorState doorState = Perception::DoorState::OPEN;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, doorState);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestDoorStateAsync(_doorPos, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestAllDoorsStates(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_DoorState > &_doorState, const CommonAPI::CallInfo *_info) {
    delegate_->requestAllDoorsStates(_internalCallStatus, _doorState, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestAllDoorsStatesAsync(RequestAllDoorsStatesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestAllDoorsStatesAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestUltrasonicValue(Perception::UltrasonicNo _ultrasonicNo, CommonAPI::CallStatus &_internalCallStatus, float &_value, const CommonAPI::CallInfo *_info) {
    if (!_ultrasonicNo.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestUltrasonicValue(_ultrasonicNo, _internalCallStatus, _value, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestUltrasonicValueAsync(const Perception::UltrasonicNo &_ultrasonicNo, RequestUltrasonicValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_ultrasonicNo.validate()) {
        float value = 0.0f;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, value);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestUltrasonicValueAsync(_ultrasonicNo, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestAllUltrasonicValues(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_UltrasonicState > &_ultrasonicStates, const CommonAPI::CallInfo *_info) {
    delegate_->requestAllUltrasonicValues(_internalCallStatus, _ultrasonicStates, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestAllUltrasonicValuesAsync(RequestAllUltrasonicValuesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestAllUltrasonicValuesAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestSpeed(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_speed, const CommonAPI::CallInfo *_info) {
    delegate_->requestSpeed(_internalCallStatus, _speed, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestSpeedAsync(RequestSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestSpeedAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestRPM(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_rpm, const CommonAPI::CallInfo *_info) {
    delegate_->requestRPM(_internalCallStatus, _rpm, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestRPMAsync(RequestRPMAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestRPMAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestCoordinates(CommonAPI::CallStatus &_internalCallStatus, Perception::Coordinates &_coordinates, const CommonAPI::CallInfo *_info) {
    delegate_->requestCoordinates(_internalCallStatus, _coordinates, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestCoordinatesAsync(RequestCoordinatesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestCoordinatesAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void PerceptionProxy<_AttributeExtensions...>::requestGearState(CommonAPI::CallStatus &_internalCallStatus, Perception::GearState &_gearState, const CommonAPI::CallInfo *_info) {
    delegate_->requestGearState(_internalCallStatus, _gearState, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PerceptionProxy<_AttributeExtensions...>::requestGearStateAsync(RequestGearStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGearStateAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &PerceptionProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool PerceptionProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PerceptionProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PerceptionProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PerceptionProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> PerceptionProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace vehicle
} // namespace coda
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_CODA_VEHICLE_Perception_PROXY_HPP_
