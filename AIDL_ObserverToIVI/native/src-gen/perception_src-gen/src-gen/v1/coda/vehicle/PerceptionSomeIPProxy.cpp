/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/coda/vehicle/PerceptionSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace coda {
namespace vehicle {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createPerceptionSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< PerceptionSomeIPProxy>(_address, _connection);
}

void initializePerceptionSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:coda.vehicle.Perception:v1_0:coda.vehicle.Perception",
        0x1235, 0x5679, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "coda.vehicle.Perception:v1_0",
        &createPerceptionSomeIPProxy);
}

INITIALIZER(registerPerceptionSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializePerceptionSomeIPProxy);
}

PerceptionSomeIPProxy::PerceptionSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          dooor_FR_Notify_(*this, 0x1b59, CommonAPI::SomeIP::event_id_t(0x9471), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::Perception_::DoorStateDeployment)),
          dooor_FL_Notify_(*this, 0x1b59, CommonAPI::SomeIP::event_id_t(0x9472), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::Perception_::DoorStateDeployment)),
          dooor_RR_Notify_(*this, 0x1b59, CommonAPI::SomeIP::event_id_t(0x9473), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::Perception_::DoorStateDeployment)),
          dooor_RL_Notify_(*this, 0x1b59, CommonAPI::SomeIP::event_id_t(0x9474), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::Perception_::DoorStateDeployment)),
          multiDoorNotify_(*this, 0x1b59, CommonAPI::SomeIP::event_id_t(0x9475), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::Perception_::multiDoorNotify_doorStateDeployment)),
          notifyUltrasonic_1_(*this, 0x1b5b, CommonAPI::SomeIP::event_id_t(0x947a), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr))),
          notifyUltrasonic_2_(*this, 0x1b5b, CommonAPI::SomeIP::event_id_t(0x947b), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr))),
          notifyUltrasonic_3_(*this, 0x1b5b, CommonAPI::SomeIP::event_id_t(0x947c), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr))),
          notifyUltrasonic_4_(*this, 0x1b5b, CommonAPI::SomeIP::event_id_t(0x947d), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr))),
          notifyMultiUltrasonic_(*this, 0x1b5b, CommonAPI::SomeIP::event_id_t(0x947e), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::Perception_::notifyMultiUltrasonic_ultrasonicStatesDeployment)),
          notifySpeed_(*this, 0x1b5c, CommonAPI::SomeIP::event_id_t(0x9482), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr))),
          notifyRPM_(*this, 0x1b5c, CommonAPI::SomeIP::event_id_t(0x947f), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr))),
          notifyGearState_(*this, 0x1b5d, CommonAPI::SomeIP::event_id_t(0x9481), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::Perception_::GearStateDeployment)),
          notifyCoordinates_(*this, 0x1b5c, CommonAPI::SomeIP::event_id_t(0x9480), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t* >(nullptr)))
{
}

PerceptionSomeIPProxy::~PerceptionSomeIPProxy() {
}


PerceptionSomeIPProxy::Dooor_FR_NotifyEvent& PerceptionSomeIPProxy::getDooor_FR_NotifyEvent() {
    return dooor_FR_Notify_;
}
PerceptionSomeIPProxy::Dooor_FL_NotifyEvent& PerceptionSomeIPProxy::getDooor_FL_NotifyEvent() {
    return dooor_FL_Notify_;
}
PerceptionSomeIPProxy::Dooor_RR_NotifyEvent& PerceptionSomeIPProxy::getDooor_RR_NotifyEvent() {
    return dooor_RR_Notify_;
}
PerceptionSomeIPProxy::Dooor_RL_NotifyEvent& PerceptionSomeIPProxy::getDooor_RL_NotifyEvent() {
    return dooor_RL_Notify_;
}
PerceptionSomeIPProxy::MultiDoorNotifyEvent& PerceptionSomeIPProxy::getMultiDoorNotifyEvent() {
    return multiDoorNotify_;
}
PerceptionSomeIPProxy::NotifyUltrasonic_1Event& PerceptionSomeIPProxy::getNotifyUltrasonic_1Event() {
    return notifyUltrasonic_1_;
}
PerceptionSomeIPProxy::NotifyUltrasonic_2Event& PerceptionSomeIPProxy::getNotifyUltrasonic_2Event() {
    return notifyUltrasonic_2_;
}
PerceptionSomeIPProxy::NotifyUltrasonic_3Event& PerceptionSomeIPProxy::getNotifyUltrasonic_3Event() {
    return notifyUltrasonic_3_;
}
PerceptionSomeIPProxy::NotifyUltrasonic_4Event& PerceptionSomeIPProxy::getNotifyUltrasonic_4Event() {
    return notifyUltrasonic_4_;
}
PerceptionSomeIPProxy::NotifyMultiUltrasonicEvent& PerceptionSomeIPProxy::getNotifyMultiUltrasonicEvent() {
    return notifyMultiUltrasonic_;
}
PerceptionSomeIPProxy::NotifySpeedEvent& PerceptionSomeIPProxy::getNotifySpeedEvent() {
    return notifySpeed_;
}
PerceptionSomeIPProxy::NotifyRPMEvent& PerceptionSomeIPProxy::getNotifyRPMEvent() {
    return notifyRPM_;
}
PerceptionSomeIPProxy::NotifyGearStateEvent& PerceptionSomeIPProxy::getNotifyGearStateEvent() {
    return notifyGearState_;
}
PerceptionSomeIPProxy::NotifyCoordinatesEvent& PerceptionSomeIPProxy::getNotifyCoordinatesEvent() {
    return notifyCoordinates_;
}

void PerceptionSomeIPProxy::requestDoorState(Perception::DoorPos _doorPos, CommonAPI::CallStatus &_internalCallStatus, Perception::DoorState &_doorState, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::DoorPos, ::v1::coda::vehicle::Perception_::DoorPosDeployment_t> deploy_doorPos(_doorPos, &::v1::coda::vehicle::Perception_::DoorPosDeployment);
    CommonAPI::Deployable< Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t> deploy_doorState(&::v1::coda::vehicle::Perception_::DoorStateDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::DoorPos,
                ::v1::coda::vehicle::Perception_::DoorPosDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::DoorState,
                ::v1::coda::vehicle::Perception_::DoorStateDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_doorPos,
        _internalCallStatus,
        deploy_doorState);
    _doorState = deploy_doorState.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestDoorStateAsync(const Perception::DoorPos &_doorPos, RequestDoorStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::DoorPos, ::v1::coda::vehicle::Perception_::DoorPosDeployment_t> deploy_doorPos(_doorPos, &::v1::coda::vehicle::Perception_::DoorPosDeployment);
    CommonAPI::Deployable< Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t> deploy_doorState(&::v1::coda::vehicle::Perception_::DoorStateDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::DoorPos,
                ::v1::coda::vehicle::Perception_::DoorPosDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::DoorState,
                ::v1::coda::vehicle::Perception_::DoorStateDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_doorPos,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t > _doorState) {
            if (_callback)
                _callback(_internalCallStatus, _doorState.getValue());
        },
        std::make_tuple(deploy_doorState));
}

void PerceptionSomeIPProxy::requestAllDoorsStates(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_DoorState > &_doorState, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< Perception::S_DoorState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t >> deploy_doorState(&::v1::coda::vehicle::Perception_::requestAllDoorsStates_doorStateDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< Perception::S_DoorState >,
                CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_doorState);
    _doorState = deploy_doorState.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestAllDoorsStatesAsync(RequestAllDoorsStatesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< Perception::S_DoorState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t >> deploy_doorState(&::v1::coda::vehicle::Perception_::requestAllDoorsStates_doorStateDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< Perception::S_DoorState >,
                CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::vector< Perception::S_DoorState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t > > _doorState) {
            if (_callback)
                _callback(_internalCallStatus, _doorState.getValue());
        },
        std::make_tuple(deploy_doorState));
}

void PerceptionSomeIPProxy::requestUltrasonicValue(Perception::UltrasonicNo _ultrasonicNo, CommonAPI::CallStatus &_internalCallStatus, float &_value, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::UltrasonicNo, ::v1::coda::vehicle::Perception_::UltrasonicNoDeployment_t> deploy_ultrasonicNo(_ultrasonicNo, &::v1::coda::vehicle::Perception_::UltrasonicNoDeployment);
    CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_value(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::UltrasonicNo,
                ::v1::coda::vehicle::Perception_::UltrasonicNoDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                float,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x3),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_ultrasonicNo,
        _internalCallStatus,
        deploy_value);
    _value = deploy_value.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestUltrasonicValueAsync(const Perception::UltrasonicNo &_ultrasonicNo, RequestUltrasonicValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::UltrasonicNo, ::v1::coda::vehicle::Perception_::UltrasonicNoDeployment_t> deploy_ultrasonicNo(_ultrasonicNo, &::v1::coda::vehicle::Perception_::UltrasonicNoDeployment);
    CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_value(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::UltrasonicNo,
                ::v1::coda::vehicle::Perception_::UltrasonicNoDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                float,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x3),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_ultrasonicNo,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< float, CommonAPI::EmptyDeployment > _value) {
            if (_callback)
                _callback(_internalCallStatus, _value.getValue());
        },
        std::make_tuple(deploy_value));
}

void PerceptionSomeIPProxy::requestAllUltrasonicValues(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_UltrasonicState > &_ultrasonicStates, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< Perception::S_UltrasonicState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t >> deploy_ultrasonicStates(&::v1::coda::vehicle::Perception_::requestAllUltrasonicValues_ultrasonicStatesDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< Perception::S_UltrasonicState >,
                CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x4),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_ultrasonicStates);
    _ultrasonicStates = deploy_ultrasonicStates.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestAllUltrasonicValuesAsync(RequestAllUltrasonicValuesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< Perception::S_UltrasonicState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t >> deploy_ultrasonicStates(&::v1::coda::vehicle::Perception_::requestAllUltrasonicValues_ultrasonicStatesDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< Perception::S_UltrasonicState >,
                CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x4),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::vector< Perception::S_UltrasonicState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t > > _ultrasonicStates) {
            if (_callback)
                _callback(_internalCallStatus, _ultrasonicStates.getValue());
        },
        std::make_tuple(deploy_ultrasonicStates));
}

void PerceptionSomeIPProxy::requestSpeed(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_speed, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_speed(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x5),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_speed);
    _speed = deploy_speed.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestSpeedAsync(RequestSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_speed(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x5),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > _speed) {
            if (_callback)
                _callback(_internalCallStatus, _speed.getValue());
        },
        std::make_tuple(deploy_speed));
}

void PerceptionSomeIPProxy::requestRPM(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_rpm, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_rpm(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_rpm);
    _rpm = deploy_rpm.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestRPMAsync(RequestRPMAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_rpm(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > _rpm) {
            if (_callback)
                _callback(_internalCallStatus, _rpm.getValue());
        },
        std::make_tuple(deploy_rpm));
}

void PerceptionSomeIPProxy::requestCoordinates(CommonAPI::CallStatus &_internalCallStatus, Perception::Coordinates &_coordinates, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::Coordinates, ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t> deploy_coordinates(static_cast< ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::Coordinates,
                ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_coordinates);
    _coordinates = deploy_coordinates.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestCoordinatesAsync(RequestCoordinatesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::Coordinates, ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t> deploy_coordinates(static_cast< ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::Coordinates,
                ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Perception::Coordinates, ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t > _coordinates) {
            if (_callback)
                _callback(_internalCallStatus, _coordinates.getValue());
        },
        std::make_tuple(deploy_coordinates));
}

void PerceptionSomeIPProxy::requestGearState(CommonAPI::CallStatus &_internalCallStatus, Perception::GearState &_gearState, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::GearState, ::v1::coda::vehicle::Perception_::GearStateDeployment_t> deploy_gearState(&::v1::coda::vehicle::Perception_::GearStateDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::GearState,
                ::v1::coda::vehicle::Perception_::GearStateDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x8),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_gearState);
    _gearState = deploy_gearState.getValue();
}

std::future<CommonAPI::CallStatus> PerceptionSomeIPProxy::requestGearStateAsync(RequestGearStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< Perception::GearState, ::v1::coda::vehicle::Perception_::GearStateDeployment_t> deploy_gearState(&::v1::coda::vehicle::Perception_::GearStateDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                Perception::GearState,
                ::v1::coda::vehicle::Perception_::GearStateDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x8),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Perception::GearState, ::v1::coda::vehicle::Perception_::GearStateDeployment_t > _gearState) {
            if (_callback)
                _callback(_internalCallStatus, _gearState.getValue());
        },
        std::make_tuple(deploy_gearState));
}

void PerceptionSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> PerceptionSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace vehicle
} // namespace coda
} // namespace v1
