/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_CODA_VEHICLE_PERCEPTION_SOMEIP_PROXY_HPP_
#define V1_CODA_VEHICLE_PERCEPTION_SOMEIP_PROXY_HPP_

#include <v1/coda/vehicle/PerceptionProxyBase.hpp>
#include <v1/coda/vehicle/PerceptionSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace coda {
namespace vehicle {

class PerceptionSomeIPProxy
    : virtual public PerceptionProxyBase,
      virtual public CommonAPI::SomeIP::Proxy {
public:
    PerceptionSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~PerceptionSomeIPProxy();

    virtual Dooor_FR_NotifyEvent& getDooor_FR_NotifyEvent();

    virtual Dooor_FL_NotifyEvent& getDooor_FL_NotifyEvent();

    virtual Dooor_RR_NotifyEvent& getDooor_RR_NotifyEvent();

    virtual Dooor_RL_NotifyEvent& getDooor_RL_NotifyEvent();

    virtual MultiDoorNotifyEvent& getMultiDoorNotifyEvent();

    virtual NotifyUltrasonic_1Event& getNotifyUltrasonic_1Event();

    virtual NotifyUltrasonic_2Event& getNotifyUltrasonic_2Event();

    virtual NotifyUltrasonic_3Event& getNotifyUltrasonic_3Event();

    virtual NotifyUltrasonic_4Event& getNotifyUltrasonic_4Event();

    virtual NotifyMultiUltrasonicEvent& getNotifyMultiUltrasonicEvent();

    virtual NotifySpeedEvent& getNotifySpeedEvent();

    virtual NotifyRPMEvent& getNotifyRPMEvent();

    virtual NotifyGearStateEvent& getNotifyGearStateEvent();

    virtual NotifyCoordinatesEvent& getNotifyCoordinatesEvent();

    virtual void requestDoorState(Perception::DoorPos _doorPos, CommonAPI::CallStatus &_internalCallStatus, Perception::DoorState &_doorState, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestDoorStateAsync(const Perception::DoorPos &_doorPos, RequestDoorStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void requestAllDoorsStates(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_DoorState > &_doorState, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestAllDoorsStatesAsync(RequestAllDoorsStatesAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void requestUltrasonicValue(Perception::UltrasonicNo _ultrasonicNo, CommonAPI::CallStatus &_internalCallStatus, float &_value, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestUltrasonicValueAsync(const Perception::UltrasonicNo &_ultrasonicNo, RequestUltrasonicValueAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void requestAllUltrasonicValues(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_UltrasonicState > &_ultrasonicStates, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestAllUltrasonicValuesAsync(RequestAllUltrasonicValuesAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void requestSpeed(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_speed, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestSpeedAsync(RequestSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void requestRPM(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_rpm, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestRPMAsync(RequestRPMAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void requestCoordinates(CommonAPI::CallStatus &_internalCallStatus, Perception::Coordinates &_coordinates, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestCoordinatesAsync(RequestCoordinatesAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void requestGearState(CommonAPI::CallStatus &_internalCallStatus, Perception::GearState &_gearState, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> requestGearStateAsync(RequestGearStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

    virtual std::future<void> getCompletionFuture();

private:
    CommonAPI::SomeIP::Event<Dooor_FR_NotifyEvent, CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t >> dooor_FR_Notify_;
    CommonAPI::SomeIP::Event<Dooor_FL_NotifyEvent, CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t >> dooor_FL_Notify_;
    CommonAPI::SomeIP::Event<Dooor_RR_NotifyEvent, CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t >> dooor_RR_Notify_;
    CommonAPI::SomeIP::Event<Dooor_RL_NotifyEvent, CommonAPI::Deployable< ::v1::coda::vehicle::Perception::DoorState, ::v1::coda::vehicle::Perception_::DoorStateDeployment_t >> dooor_RL_Notify_;
    CommonAPI::SomeIP::Event<MultiDoorNotifyEvent, CommonAPI::Deployable< std::vector< ::v1::coda::vehicle::Perception::S_DoorState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_DoorStateDeployment_t > >> multiDoorNotify_;
    CommonAPI::SomeIP::Event<NotifyUltrasonic_1Event, CommonAPI::Deployable< float, CommonAPI::EmptyDeployment >> notifyUltrasonic_1_;
    CommonAPI::SomeIP::Event<NotifyUltrasonic_2Event, CommonAPI::Deployable< float, CommonAPI::EmptyDeployment >> notifyUltrasonic_2_;
    CommonAPI::SomeIP::Event<NotifyUltrasonic_3Event, CommonAPI::Deployable< float, CommonAPI::EmptyDeployment >> notifyUltrasonic_3_;
    CommonAPI::SomeIP::Event<NotifyUltrasonic_4Event, CommonAPI::Deployable< float, CommonAPI::EmptyDeployment >> notifyUltrasonic_4_;
    CommonAPI::SomeIP::Event<NotifyMultiUltrasonicEvent, CommonAPI::Deployable< std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState >, CommonAPI::SomeIP::ArrayDeployment< ::v1::coda::vehicle::Perception_::S_UltrasonicStateDeployment_t > >> notifyMultiUltrasonic_;
    CommonAPI::SomeIP::Event<NotifySpeedEvent, CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> >> notifySpeed_;
    CommonAPI::SomeIP::Event<NotifyRPMEvent, CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> >> notifyRPM_;
    CommonAPI::SomeIP::Event<NotifyGearStateEvent, CommonAPI::Deployable< ::v1::coda::vehicle::Perception::GearState, ::v1::coda::vehicle::Perception_::GearStateDeployment_t >> notifyGearState_;
    CommonAPI::SomeIP::Event<NotifyCoordinatesEvent, CommonAPI::Deployable< ::v1::coda::vehicle::Perception::Coordinates, ::v1::coda::vehicle::Perception_::CoordinatesDeployment_t >> notifyCoordinates_;

};

} // namespace vehicle
} // namespace coda
} // namespace v1

#endif // V1_CODA_VEHICLE_Perception_SOMEIP_PROXY_HPP_
