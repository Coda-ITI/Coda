/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_CODA_VEHICLE_Perception_STUB_DEFAULT_HPP_
#define V1_CODA_VEHICLE_Perception_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/coda/vehicle/PerceptionStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace coda {
namespace vehicle {

/**
 * Provides a default implementation for PerceptionStubRemoteEvent and
 * PerceptionStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT PerceptionStubDefault
    : public virtual PerceptionStub {
public:
    COMMONAPI_EXPORT PerceptionStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(Perception::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT PerceptionStubRemoteEvent* initStubAdapter(const std::shared_ptr< PerceptionStubAdapter> &_adapter) {
        CommonAPI::Stub<PerceptionStubAdapter, PerceptionStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual void fireDooor_FR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        if (!_doorState.validate()) {
            return;
        }
        PerceptionStub::fireDooor_FR_NotifyEvent(_doorState);
    }
    COMMONAPI_EXPORT virtual void fireDooor_FL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        if (!_doorState.validate()) {
            return;
        }
        PerceptionStub::fireDooor_FL_NotifyEvent(_doorState);
    }
    COMMONAPI_EXPORT virtual void fireDooor_RR_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        if (!_doorState.validate()) {
            return;
        }
        PerceptionStub::fireDooor_RR_NotifyEvent(_doorState);
    }
    COMMONAPI_EXPORT virtual void fireDooor_RL_NotifyEvent(const ::v1::coda::vehicle::Perception::DoorState &_doorState) {
        if (!_doorState.validate()) {
            return;
        }
        PerceptionStub::fireDooor_RL_NotifyEvent(_doorState);
    }
    COMMONAPI_EXPORT virtual void fireMultiDoorNotifyEvent(const std::vector< ::v1::coda::vehicle::Perception::S_DoorState > &_doorState) {
        PerceptionStub::fireMultiDoorNotifyEvent(_doorState);
    }
    COMMONAPI_EXPORT virtual void requestDoorState(const std::shared_ptr<CommonAPI::ClientId> _client, Perception::DoorPos _doorPos, requestDoorStateReply_t _reply) {
        (void)_client;
        (void)_doorPos;
        Perception::DoorState doorState = Perception::DoorState::OPEN;
        if (!doorState.validate()) {
            return;
        }
        _reply(doorState);
    }
    COMMONAPI_EXPORT virtual void requestAllDoorsStates(const std::shared_ptr<CommonAPI::ClientId> _client, requestAllDoorsStatesReply_t _reply) {
        (void)_client;
        std::vector< Perception::S_DoorState > doorState = {};
        _reply(doorState);
    }
    COMMONAPI_EXPORT virtual void fireNotifyUltrasonic_1Event(const float &_value) {
        PerceptionStub::fireNotifyUltrasonic_1Event(_value);
    }
    COMMONAPI_EXPORT virtual void fireNotifyUltrasonic_2Event(const float &_value) {
        PerceptionStub::fireNotifyUltrasonic_2Event(_value);
    }
    COMMONAPI_EXPORT virtual void fireNotifyUltrasonic_3Event(const float &_value) {
        PerceptionStub::fireNotifyUltrasonic_3Event(_value);
    }
    COMMONAPI_EXPORT virtual void fireNotifyUltrasonic_4Event(const float &_value) {
        PerceptionStub::fireNotifyUltrasonic_4Event(_value);
    }
    COMMONAPI_EXPORT virtual void fireNotifyMultiUltrasonicEvent(const std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState > &_ultrasonicStates) {
        PerceptionStub::fireNotifyMultiUltrasonicEvent(_ultrasonicStates);
    }
    COMMONAPI_EXPORT virtual void requestUltrasonicValue(const std::shared_ptr<CommonAPI::ClientId> _client, Perception::UltrasonicNo _ultrasonicNo, requestUltrasonicValueReply_t _reply) {
        (void)_client;
        (void)_ultrasonicNo;
        float value = 0.0f;
        _reply(value);
    }
    COMMONAPI_EXPORT virtual void requestAllUltrasonicValues(const std::shared_ptr<CommonAPI::ClientId> _client, requestAllUltrasonicValuesReply_t _reply) {
        (void)_client;
        std::vector< Perception::S_UltrasonicState > ultrasonicStates = {};
        _reply(ultrasonicStates);
    }
    COMMONAPI_EXPORT virtual void fireNotifySpeedEvent(const uint16_t &_speed) {
        PerceptionStub::fireNotifySpeedEvent(_speed);
    }
    COMMONAPI_EXPORT virtual void fireNotifyRPMEvent(const uint16_t &_RPM) {
        PerceptionStub::fireNotifyRPMEvent(_RPM);
    }
    COMMONAPI_EXPORT virtual void fireNotifyGearStateEvent(const ::v1::coda::vehicle::Perception::GearState &_gearState) {
        if (!_gearState.validate()) {
            return;
        }
        PerceptionStub::fireNotifyGearStateEvent(_gearState);
    }
    COMMONAPI_EXPORT virtual void fireNotifyCoordinatesEvent(const ::v1::coda::vehicle::Perception::Coordinates &_coordinates) {
        PerceptionStub::fireNotifyCoordinatesEvent(_coordinates);
    }
    COMMONAPI_EXPORT virtual void requestSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, requestSpeedReply_t _reply) {
        (void)_client;
        uint16_t speed = 0u;
        _reply(speed);
    }
    COMMONAPI_EXPORT virtual void requestRPM(const std::shared_ptr<CommonAPI::ClientId> _client, requestRPMReply_t _reply) {
        (void)_client;
        uint16_t rpm = 0u;
        _reply(rpm);
    }
    COMMONAPI_EXPORT virtual void requestCoordinates(const std::shared_ptr<CommonAPI::ClientId> _client, requestCoordinatesReply_t _reply) {
        (void)_client;
        Perception::Coordinates coordinates = {};
        _reply(coordinates);
    }
    COMMONAPI_EXPORT virtual void requestGearState(const std::shared_ptr<CommonAPI::ClientId> _client, requestGearStateReply_t _reply) {
        (void)_client;
        Perception::GearState gearState = Perception::GearState::PARK;
        if (!gearState.validate()) {
            return;
        }
        _reply(gearState);
    }


protected:
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual PerceptionStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(PerceptionStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }


    private:
        PerceptionStubDefault *defaultStub_;
    };
protected:
    PerceptionStubDefault::RemoteEventHandler remoteEventHandler_;

private:


    CommonAPI::Version interfaceVersion_;
};

} // namespace vehicle
} // namespace coda
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_CODA_VEHICLE_Perception_STUB_DEFAULT
