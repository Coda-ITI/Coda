/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_CODA_VEHICLE_Perception_PROXY_BASE_HPP_
#define V1_CODA_VEHICLE_Perception_PROXY_BASE_HPP_

#include <v1/coda/vehicle/Perception.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace coda {
namespace vehicle {

class PerceptionProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v1::coda::vehicle::Perception::DoorState
    > Dooor_FR_NotifyEvent;
    typedef CommonAPI::Event<
        ::v1::coda::vehicle::Perception::DoorState
    > Dooor_FL_NotifyEvent;
    typedef CommonAPI::Event<
        ::v1::coda::vehicle::Perception::DoorState
    > Dooor_RR_NotifyEvent;
    typedef CommonAPI::Event<
        ::v1::coda::vehicle::Perception::DoorState
    > Dooor_RL_NotifyEvent;
    typedef CommonAPI::Event<
        std::vector< ::v1::coda::vehicle::Perception::S_DoorState >
    > MultiDoorNotifyEvent;
    typedef CommonAPI::Event<
        float
    > NotifyUltrasonic_1Event;
    typedef CommonAPI::Event<
        float
    > NotifyUltrasonic_2Event;
    typedef CommonAPI::Event<
        float
    > NotifyUltrasonic_3Event;
    typedef CommonAPI::Event<
        float
    > NotifyUltrasonic_4Event;
    typedef CommonAPI::Event<
        std::vector< ::v1::coda::vehicle::Perception::S_UltrasonicState >
    > NotifyMultiUltrasonicEvent;
    typedef CommonAPI::Event<
        uint16_t
    > NotifySpeedEvent;
    typedef CommonAPI::Event<
        uint16_t
    > NotifyRPMEvent;
    typedef CommonAPI::Event<
        ::v1::coda::vehicle::Perception::GearState
    > NotifyGearStateEvent;
    typedef CommonAPI::Event<
        ::v1::coda::vehicle::Perception::Coordinates
    > NotifyCoordinatesEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const Perception::DoorState&)> RequestDoorStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector< Perception::S_DoorState >&)> RequestAllDoorsStatesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const float&)> RequestUltrasonicValueAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector< Perception::S_UltrasonicState >&)> RequestAllUltrasonicValuesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint16_t&)> RequestSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint16_t&)> RequestRPMAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Perception::Coordinates&)> RequestCoordinatesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Perception::GearState&)> RequestGearStateAsyncCallback;

    virtual Dooor_FR_NotifyEvent& getDooor_FR_NotifyEvent() = 0;
    virtual Dooor_FL_NotifyEvent& getDooor_FL_NotifyEvent() = 0;
    virtual Dooor_RR_NotifyEvent& getDooor_RR_NotifyEvent() = 0;
    virtual Dooor_RL_NotifyEvent& getDooor_RL_NotifyEvent() = 0;
    virtual MultiDoorNotifyEvent& getMultiDoorNotifyEvent() = 0;
    virtual void requestDoorState(Perception::DoorPos _doorPos, CommonAPI::CallStatus &_internalCallStatus, Perception::DoorState &_doorState, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestDoorStateAsync(const Perception::DoorPos &_doorPos, RequestDoorStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestAllDoorsStates(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_DoorState > &_doorState, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestAllDoorsStatesAsync(RequestAllDoorsStatesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual NotifyUltrasonic_1Event& getNotifyUltrasonic_1Event() = 0;
    virtual NotifyUltrasonic_2Event& getNotifyUltrasonic_2Event() = 0;
    virtual NotifyUltrasonic_3Event& getNotifyUltrasonic_3Event() = 0;
    virtual NotifyUltrasonic_4Event& getNotifyUltrasonic_4Event() = 0;
    virtual NotifyMultiUltrasonicEvent& getNotifyMultiUltrasonicEvent() = 0;
    virtual void requestUltrasonicValue(Perception::UltrasonicNo _ultrasonicNo, CommonAPI::CallStatus &_internalCallStatus, float &_value, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestUltrasonicValueAsync(const Perception::UltrasonicNo &_ultrasonicNo, RequestUltrasonicValueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestAllUltrasonicValues(CommonAPI::CallStatus &_internalCallStatus, std::vector< Perception::S_UltrasonicState > &_ultrasonicStates, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestAllUltrasonicValuesAsync(RequestAllUltrasonicValuesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual NotifySpeedEvent& getNotifySpeedEvent() = 0;
    virtual NotifyRPMEvent& getNotifyRPMEvent() = 0;
    virtual NotifyGearStateEvent& getNotifyGearStateEvent() = 0;
    virtual NotifyCoordinatesEvent& getNotifyCoordinatesEvent() = 0;
    virtual void requestSpeed(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_speed, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSpeedAsync(RequestSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestRPM(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_rpm, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestRPMAsync(RequestRPMAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestCoordinates(CommonAPI::CallStatus &_internalCallStatus, Perception::Coordinates &_coordinates, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestCoordinatesAsync(RequestCoordinatesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestGearState(CommonAPI::CallStatus &_internalCallStatus, Perception::GearState &_gearState, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGearStateAsync(RequestGearStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace vehicle
} // namespace coda
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_CODA_VEHICLE_Perception_PROXY_BASE_HPP_
