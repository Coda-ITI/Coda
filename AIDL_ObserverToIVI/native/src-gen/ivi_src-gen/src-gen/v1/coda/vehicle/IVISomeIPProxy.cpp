/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/coda/vehicle/IVISomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace coda {
namespace vehicle {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createIVISomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< IVISomeIPProxy>(_address, _connection);
}

void initializeIVISomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:coda.vehicle.IVI:v1_0:coda.vehicle.IVI",
        0x1236, 0x567a, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "coda.vehicle.IVI:v1_0",
        &createIVISomeIPProxy);
}

INITIALIZER(registerIVISomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeIVISomeIPProxy);
}

IVISomeIPProxy::IVISomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          notifyThemeChange_(*this, 0x1b5e, CommonAPI::SomeIP::event_id_t(0x9486), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::coda::vehicle::IVI_::ThemeDeployment))
{
}

IVISomeIPProxy::~IVISomeIPProxy() {
}


IVISomeIPProxy::NotifyThemeChangeEvent& IVISomeIPProxy::getNotifyThemeChangeEvent() {
    return notifyThemeChange_;
}

void IVISomeIPProxy::requestTheme(CommonAPI::CallStatus &_internalCallStatus, IVI::Theme &_theme, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< IVI::Theme, ::v1::coda::vehicle::IVI_::ThemeDeployment_t> deploy_theme(&::v1::coda::vehicle::IVI_::ThemeDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                IVI::Theme,
                ::v1::coda::vehicle::IVI_::ThemeDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_theme);
    _theme = deploy_theme.getValue();
}

std::future<CommonAPI::CallStatus> IVISomeIPProxy::requestThemeAsync(RequestThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< IVI::Theme, ::v1::coda::vehicle::IVI_::ThemeDeployment_t> deploy_theme(&::v1::coda::vehicle::IVI_::ThemeDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                IVI::Theme,
                ::v1::coda::vehicle::IVI_::ThemeDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< IVI::Theme, ::v1::coda::vehicle::IVI_::ThemeDeployment_t > _theme) {
            if (_callback)
                _callback(_internalCallStatus, _theme.getValue());
        },
        std::make_tuple(deploy_theme));
}

void IVISomeIPProxy::changeTheme(IVI::Theme _theme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< IVI::Theme, ::v1::coda::vehicle::IVI_::ThemeDeployment_t> deploy_theme(_theme, &::v1::coda::vehicle::IVI_::ThemeDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                IVI::Theme,
                ::v1::coda::vehicle::IVI_::ThemeDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_theme,
        _internalCallStatus);
}

std::future<CommonAPI::CallStatus> IVISomeIPProxy::changeThemeAsync(const IVI::Theme &_theme, ChangeThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< IVI::Theme, ::v1::coda::vehicle::IVI_::ThemeDeployment_t> deploy_theme(_theme, &::v1::coda::vehicle::IVI_::ThemeDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                IVI::Theme,
                ::v1::coda::vehicle::IVI_::ThemeDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_theme,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
            if (_callback)
                _callback(_internalCallStatus);
        },
        std::make_tuple());
}

void IVISomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> IVISomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace vehicle
} // namespace coda
} // namespace v1
