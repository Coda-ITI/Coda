/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_CODA_VEHICLE_IVI_SOMEIP_STUB_ADAPTER_HPP_
#define V1_CODA_VEHICLE_IVI_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/coda/vehicle/IVIStub.hpp>
#include <v1/coda/vehicle/IVISomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace coda {
namespace vehicle {

template <typename _Stub = ::v1::coda::vehicle::IVIStub, typename... _Stubs>
class IVISomeIPStubAdapterInternal
    : public virtual IVIStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< IVISomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> IVISomeIPStubAdapterHelper;

    ~IVISomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        IVISomeIPStubAdapterHelper::deinit();
    }

    void fireNotifyThemeChangeEvent(const ::v1::coda::vehicle::IVI::Theme &_theme);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::coda::vehicle::IVIStub,
        CommonAPI::Version
    > getIVIInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::IVIStub,
        std::tuple< >,
        std::tuple< IVI::Theme>,
        std::tuple< >,
        std::tuple< ::v1::coda::vehicle::IVI_::ThemeDeployment_t>
    > requestThemeStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::coda::vehicle::IVIStub,
        std::tuple< IVI::Theme>,
        std::tuple< >,
        std::tuple< ::v1::coda::vehicle::IVI_::ThemeDeployment_t>,
        std::tuple< >
    > changeThemeStubDispatcher;
    
    IVISomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        IVISomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< IVIStub>(_stub)),
        getIVIInterfaceVersionStubDispatcher(&IVIStub::lockInterfaceVersionAttribute, &IVIStub::getInterfaceVersion, false, true),
        requestThemeStubDispatcher(
            &IVIStub::requestTheme,
            false,
            _stub->hasElement(1),
            std::make_tuple(),
            std::make_tuple(&::v1::coda::vehicle::IVI_::ThemeDeployment))
        
        ,
        changeThemeStubDispatcher(
            &IVIStub::changeTheme,
            false,
            _stub->hasElement(2),
            std::make_tuple(&::v1::coda::vehicle::IVI_::ThemeDeployment),
            std::make_tuple())
        
    {
        IVISomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &requestThemeStubDispatcher );
        IVISomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &changeThemeStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1b5e));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9486), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void IVISomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyThemeChangeEvent(const ::v1::coda::vehicle::IVI::Theme &_theme) {
    CommonAPI::Deployable< IVI::Theme, ::v1::coda::vehicle::IVI_::ThemeDeployment_t> deployed_theme(_theme, &::v1::coda::vehicle::IVI_::ThemeDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::coda::vehicle::IVI::Theme, ::v1::coda::vehicle::IVI_::ThemeDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9486),
            false,
             deployed_theme 
    );
}


template <typename _Stub, typename... _Stubs>
void IVISomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void IVISomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v1::coda::vehicle::IVIStub, typename... _Stubs>
class IVISomeIPStubAdapter
    : public IVISomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    IVISomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          IVISomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace vehicle
} // namespace coda
} // namespace v1

#endif // V1_CODA_VEHICLE_IVI_SOMEIP_STUB_ADAPTER_HPP_
